name: Build, Push, and Deploy to LeoCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install Java for Backend
      - name: Install Java
        if: matrix.service == 'backend'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
          cache-dependency-path: |
            ./app/backend/*.gradle*
            ./app/backend/**/gradle-wrapper.properties

      # Cache Gradle for Backend
      - name: Cache Gradle
        if: matrix.service == 'backend'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # GHCR Login
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and Push Quarkus Backend Docker image
      - name: Build and Push Quarkus Backend Docker image
        if: matrix.service == 'backend'
        working-directory: ./app/backend
        run: |
          ./gradlew clean build --no-daemon -x test
          docker build --tag ghcr.io/htl-leo-itp-2325-4-5bhitm/leoball-backend:latest .
          docker push ghcr.io/htl-leo-itp-2325-4-5bhitm/leoball-backend:latest

      # Install Node for Frontend
      - name: Install Node
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: ./app/frontend/web/package.json

      # Cache NPM for Frontend
      - name: Cache NPM
        if: matrix.service == 'frontend'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('app/frontend/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Build and Push Angular Frontend Docker image
      - name: Build and Push Angular Frontend Docker image
        if: matrix.service == 'frontend'
        working-directory: ./app/frontend/web
        run: |
          npm i --legacy-peer-deps
          npx ng build
          docker build --tag ghcr.io/htl-leo-itp-2325-4-5bhitm/leoball-frontend:latest .
          docker push ghcr.io/htl-leo-itp-2325-4-5bhitm/leoball-frontend:latest

      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # Apply Kubernetes Resources for backend
      - name: Deploy Quarkus Backend to Kubernetes
        if: matrix.service == 'backend' && success()
        run: |
          kubectl apply -f .github/k8s/backend.yaml

      # Apply Kubernetes Resources for frontend
      - name: Deploy Angular Frontend to Kubernetes
        if: matrix.service == 'frontend' && success()
        run: |
          kubectl apply -f .github/k8s/frontend.yaml

      # Apply Postgres and Ingress resources
      - name: Apply Postgres and Ingress Resources
        if: matrix.service == 'backend' || matrix.service == 'frontend'
        run: |
          kubectl apply -f .github/k8s/postgres.yaml
          kubectl apply -f .github/k8s/ingress.yaml

      # Verify Quarkus Backend Deployment
      - name: Verify Quarkus Backend Deployment
        if: matrix.service == 'backend' && success()
        run: kubectl get pods -l app=quarkus

      # Verify Angular Frontend Deployment
      - name: Verify Angular Frontend Deployment
        if: matrix.service == 'frontend' && success()
        run: kubectl get pods -l app=angular

  restart_pods:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Restart Pods
        run: |
          echo "Restarting pods..."
          kubectl rollout restart deployment
